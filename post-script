#!/usr/bin/env bash
set -euo pipefail

# ─── 0) Identify user & home ─────────────────────────────────────────────────
USER_NAME="$USER"
USER_HOME="$HOME"
echo "→ Installing for: $USER_NAME ($USER_HOME)"

# ─── 1) Ensure we can sudo ───────────────────────────────────────────────────
if ! sudo -v; then
  echo "Error: this script needs sudo privileges for system installs." >&2
  exit 1
fi

# ─── 2) System packages ───────────────────────────────────────────────────────
echo "→ Updating system & installing core packages..."
sudo pacman -Syu --needed --noconfirm \
  base-devel git obsidian swww waybar coreutils python-pipx rofi \
  exa zoxide fzf fastfetch curl wget unzip

# ─── 3) pipx & Exegol ──────────────────────────────────────────────────────────
export PATH="$USER_HOME/.local/bin:$PATH"
echo "→ Setting up pipx…"
if ! command -v pipx &>/dev/null; then
  echo "Error: pipx not on PATH after installation." >&2
  exit 1
fi
pipx ensurepath
echo "→ Installing/upgrading Exegol…"
pipx install --force exegol

# ─── 4) Install or update yay (AUR helper) ────────────────────────────────────
YAY_DIR="/tmp/yay"
echo "→ Cloning/updating yay…"
if [[ -d "$YAY_DIR/.git" ]]; then
  git -C "$YAY_DIR" pull --ff-only
else
  rm -rf "$YAY_DIR"
  git clone https://aur.archlinux.org/yay.git "$YAY_DIR"
fi
echo "→ Building & installing yay…"
(
  cd "$YAY_DIR"
  makepkg -si --noconfirm
)

# ─── 5) AUR packages ──────────────────────────────────────────────────────────
echo "→ Installing AUR packages…"
yay -S --noconfirm min-browser zsh bat

# ─── 6) fzf integration ───────────────────────────────────────────────────────
if [[ ! -d "$USER_HOME/.fzf" ]]; then
  echo "→ Installing fzf…"
  git clone --depth 1 https://github.com/junegunn/fzf.git "$USER_HOME/.fzf"
  yes | "$USER_HOME/.fzf/install" --all
else
  echo "→ fzf already installed"
fi

# ─── 7) Oh My Zsh ─────────────────────────────────────────────────────────────
if [[ ! -d "$USER_HOME/.oh-my-zsh" ]]; then
  echo "→ Installing Oh My Zsh…"
  export RUNZSH=no CHSH=no
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
  echo "→ Oh My Zsh already present"
fi

# ─── 8) Zsh plugins ───────────────────────────────────────────────────────────
ZSH_CUSTOM="$USER_HOME/.oh-my-zsh/custom"
declare -A ZSH_PLUGINS=(
  [zsh-autosuggestions]="https://github.com/zsh-users/zsh-autosuggestions.git"
  [zsh-syntax-highlighting]="https://github.com/zsh-users/zsh-syntax-highlighting.git"
  [fzf-tab]="https://github.com/Aloxaf/fzf-tab.git"
)
for name in "${!ZSH_PLUGINS[@]}"; do
  dest="$ZSH_CUSTOM/plugins/$name"
  if [[ ! -d "$dest" ]]; then
    echo "→ Installing plugin $name…"
    git clone "${ZSH_PLUGINS[$name]}" "$dest"
  else
    echo "→ Plugin $name already installed"
  fi
done

# ─── 9) Enable plugins in ~/.zshrc ───────────────────────────────────────────
ZSHRC="$USER_HOME/.zshrc"
echo "→ Enabling plugins in $ZSHRC…"
if [[ -f "$ZSHRC" ]]; then
  if grep -q '^plugins=' "$ZSHRC"; then
    sed -i -E \
      "s|^plugins=\(.*\)|plugins=(git zsh-autosuggestions zsh-syntax-highlighting fzf-tab)|" \
      "$ZSHRC"
  else
    echo "plugins=(git zsh-autosuggestions zsh-syntax-highlighting fzf-tab)" >>"$ZSHRC"
  fi
else
  cat <<'EOF' >"$ZSHRC"
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"
plugins=(git zsh-autosuggestions zsh-syntax-highlighting fzf-tab)
source $ZSH/oh-my-zsh.sh
EOF
fi

# ─── 10) Bootstrap dotfiles ───────────────────────────────────────────────────
if [[ -d "$USER_HOME/.dotfiles" ]]; then
  DOTDIR="$USER_HOME/.dotfiles"
elif [[ -d "$USER_HOME/dotfiles" ]]; then
  DOTDIR="$USER_HOME/dotfiles"
else
  GIT_REPO="https://github.com/YOURUSERNAME/dotfiles.git"
  echo "→ Cloning dotfiles from $GIT_REPO…"
  git clone "$GIT_REPO" "$USER_HOME/.dotfiles"
  DOTDIR="$USER_HOME/.dotfiles"
fi

echo "→ Running dotfiles installer…"
if [[ -x "$DOTDIR/install" ]]; then
  "$DOTDIR/install"
else
  chmod +x "$DOTDIR/install"
  "$DOTDIR/install"
fi

rm ~/.zshrc
~/dotfiles/install
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
chsh -s "/bin/zsh"
##
# ─── Done ─────────────────────────────────────────────────────────────────────
echo
echo "✔ All dependencies installed."
echo "→ Log out/in or run 'exec zsh' to start using Zsh with your plugins."
